{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n//import log from 'core/log';\n//import {eventTypes} from 'core_form/events';\n////import Templates from \"../../../../../../lib/amd/src/templates\";\nimport Templates from 'core/templates';\n\nexport const init = () => {\n    registerAllEventlistener();\n    // Timeout notwendig, damit das Bild in der Draftarea \"vorhanden\" ist.\n    // document.querySelector('#id_unilabeltype_imageboard_backgroundimage_fieldset .filemanager-container .realpreview');\n    setTimeout(refreshBackgroundImage, 1000);\n    // To show all images on pageload.\n    setTimeout(refreshAllImages, 1000);\n\n    setTimeout(function() {\n        let canvaswidth = 800;\n        let canvasheight = 400;\n        let gridcolor = \"#f00\";\n        renderHelpergrid(canvaswidth, canvasheight, gridcolor);\n    }, 1000);\n\n    /**\n     *\n     * @param {event} event\n     */\n    function focusoutExecute(event) {\n        console.log(\"focusoutExecute\", event);\n        var number = getNumberFromEvent(event);\n        if (number >= 0) {\n            refreshImage(number);\n        } else {\n            console.log(\"refreshAllImages\");\n            // ToDo: only refresh if titlecolor, titlebackgroundcolor, titlesize was changed\n            refreshAllImages();\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @returns {*}\n     */\n    function getNumberFromEvent(event) {\n        // If there is a focusout event from one of the following input fields then evaluate\n        // the number of the element that was changed.\n        let imageidselectors = [\n            'id_unilabeltype_imageboard_title_',\n            'id_unilabeltype_imageboard_xposition_',\n            'id_unilabeltype_imageboard_yposition_',\n            'id_unilabeltype_imageboard_targetwidth_',\n            'id_unilabeltype_imageboard_targetheight_',\n            'id_unilabeltype_imageboard_border_',\n        ];\n        const eventid = event.target.getAttribute('id');\n        for (let i = 0; i < imageidselectors.length; i++) {\n            if (eventid.includes(imageidselectors[i])) {\n                return eventid.split(imageidselectors[i])[1];\n            }\n        }\n        // If focus out was NOT from one of our inputfield then return a number less than zero.\n        return -1;\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function onclickExecute(event) {\n        var targetid = event.target.getAttribute('id');\n        var mform = targetid.split('button-mform1')[1];\n        if (mform) {\n            setTimeout(function() {\n                // An element was added so we have to add a div for the image to the dom.\n                let singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n                let number = singleElements.length;\n                addImageToDom(number - 1);\n            }, 500);\n        }\n    }\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n\n        // All focusout-events will be handeled by oneListenerForAllInputFocusout.\n        mform.addEventListener(\"focusout\", focusoutExecute, false);\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"click\", onclickExecute, false);\n\n        // All uploadCompleted-events\n        //// mform.addEventListener(eventTypes.uploadCompleted, machwas, false);\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        // ToDo: better use eventlistener\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasx, {attributes: true, childList: true, subtree: true});\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasy, {attributes: true, childList: true, subtree: true});\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        // previewimage vom filemanager id_unilabeltype_imageboard_backgroundimage_fieldset erhalten\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-canvas');\n\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // ToDo    if (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        }\n    }\n\n\n    /**\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     */\n    function renderHelpergrid(canvaswidth, canvasheight) {\n        console.log(\"renderHelpergrid canvaswidth, canvasheight\", canvaswidth, canvasheight);\n        let helpergrids = [];\n        for (let y = 0; y < canvasheight; y = y + 50) {\n            for (let x = 0; x < canvaswidth; x = x + 50) {\n                let helpergrid = {};\n                helpergrid['x'] = x;\n                helpergrid['y'] = y;\n                helpergrids.push(helpergrid);\n            }\n        }\n        const context = {\n            // Data to be rendered\n            helpergrids: helpergrids,\n            gridcolor: \"#f00\",\n            cmid: 12345,\n            hidden: 0\n        };\n\n        Templates.renderForPromise('unilabeltype_imageboard/imageboard_helpergridpreview', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n            let combined = \"<div>\" + imageboardcontainer + \"</div>\" + html;\n            Templates.replaceNodeContents('#imageboardcontainer', combined, js);\n            //return null;\n        }).catch(() => {\n            console.error('Rendering failed');\n        });\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * We need a timeout\n     */\n    function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // Todo: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already a div for this image.\n            const imageid = document.getElementById('unilabel-imageboard-imageid-' + number);\n            if (imageid === null) {\n                // Div does not exist so we need do add it do dom.\n                addImageToDom(number);\n                // ToDo: Do we need a timeout to wait until the dic was added so that refresh can work correctly?\n                // see also refreshImage ... there is already a timeout\n                setTimeout(function() {\n                    console.log(\"verzögerter refresh\");\n                    refreshImage(number);\n                }, 1000);\n            } else {\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {int} number\n     */\n    function addImageToDom(number) {\n        const imageid = document.getElementById('unilabel-imageboard-imageid-' + number);\n        if (imageid === null) {\n            console.log(\"imageid ist null also Bild hinzufügen\");\n            renderAddedImage(number);\n            // This div does not exist so we need do add it do dom.\n            // Add an obverser to be able to update if image is uploaded.\n            let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n            if (imagefileNode) {\n                let observer = new MutationObserver(refreshImage);\n                observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n            }\n        } else {\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     *\n     * @param {number} number of\n     */\n    function renderAddedImage(number) {\n        console.log(\"renderAddedImage number\", renderAddedImage, number);\n        const context = {\n            // Data to be rendered\n            number: number,\n            title: \"title\"\n        };\n\n        Templates.renderForPromise('unilabeltype_imageboard/previewelement', context).then(({html, js}) => {\n            // We have to get the actual content, combine it with the rendered image and replace then the actual content.\n            let imageboardcontainer = document.getElementById('imageboardcontainer').innerHTML;\n            let combined = \"<div>\" + imageboardcontainer + \"</div>\" + html;\n            Templates.replaceNodeContents('#imageboardcontainer', combined, js);\n            //return null;\n        }).catch(() => {\n            // No tiny editor present\n        });\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refresh\n     * this image.\n     * @param {int} number\n     */\n    function refreshImage(number) {\n        // When there was an upload, then the number is NOT a number.\n        // ToDo: Do not yet know the best way how I will get the number in his case.\n        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.\n        // In the else code ther will be a refresh of ALL images until I can refactor this.\n        if (!Array.isArray(number)) {\n            let imageid = document.getElementById('unilabel-imageboard-imageid-' + number);\n            // Werte für das image setzen\n            let imagedata = getAllImagedataFromForm(number);\n            imageid.style.background = imagedata['titlebackgroundcolor'];\n            imageid.src = imagedata['src'];\n            const imagediv = document.getElementById('unilabel-imageboard-element-' + number);\n            imagediv.style.left = parseInt(imagedata['xposition']) + \"px\";\n            imagediv.style.top = parseInt(imagedata['yposition']) + \"px\";\n\n            // Breite und Höhe\n            if (imagedata['targetwidth'] != 0) {\n                imageid.style.width = imagedata['targetwidth'] + \"px\";\n            } else {\n                imageid.style.width = \"auto\";\n            }\n            if (imagedata['targetheight'] != 0) {\n                imageid.style.height = imagedata['targetheight'] + \"px\";\n            } else {\n                imageid.style.height = \"auto\";\n            }\n            if (imagedata['title'] != \"\") {\n                imageid.title = imagedata['title'];\n            } else {\n                imageid.title = '';\n            }\n            if (imagedata['border'] != 0) {\n                imageid.style.border = imagedata['border'] + \"px solid\";\n                imageid.style.borderColor = imagedata['titlebackgroundcolor'];\n            } else {\n                imageid.style.border = \"0\";\n            }\n\n            // ToDo: add title if not empty\n            let title = imagedata['title'];\n            const elementtitle = document.getElementById('id_elementtitle-' + number);\n            elementtitle.innerHTML = title;\n            elementtitle.style.color = imagedata['titlecolor'];\n            elementtitle.style.backgroundColor = imagedata['titlebackgroundcolor'];\n            elementtitle.style.fontSize = imagedata['fontsize'] + \"px\";\n        } else {\n            //console.log(\"number ist ein array\" , number);\n            //console.log(\"number[0] ist ein array\" , number[0]);\n            //console.log(\"number[0].attributeName ist ein array\" , number[0].attributeName);\n            //////console.log(\"number[0].target ist ein array\", number[0].target);\n            setTimeout(function() {\n                refreshAllImages();\n            }, 600);\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        //console.log(\"getAllImagedataFromForm number= \" + number);\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n        };\n\n        let imagedata = [];\n        //console.log(\"document.getElementById(imageids.title)\", document.getElementById(imageids.title));\n        imagedata['title'] = document.getElementById(imageids.title).value;\n        imagedata['titlecolor'] = document.getElementById(imageids.titlecolor).value;\n        imagedata['titlebackgroundcolor'] = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata['fontsize'] = document.getElementById(imageids.fontsize).value;\n        imagedata['xposition'] = document.getElementById(imageids.xposition).value;\n        imagedata['yposition'] = document.getElementById(imageids.yposition).value;\n        imagedata['targetwidth'] = document.getElementById(imageids.targetwidth).value;\n        imagedata['targetheight'] = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata['src'] = src;\n        imagedata['border'] = document.getElementById(imageids.border).value;\n\n        return imagedata;\n    }\n};\n"],"names":["focusoutExecute","event","console","log","number","imageidselectors","eventid","target","getAttribute","i","length","includes","split","getNumberFromEvent","refreshImage","refreshAllImages","onclickExecute","setTimeout","addImageToDom","document","querySelectorAll","refreshBackgroundImage","previewimage","getElementById","getElementsByClassName","backgrounddiv","backgroundurl","style","background","backgroundSize","backgroundImage","canvaswidth","selectedOptions","value","width","canvasheight","height","singleElements","renderAddedImage","imagefileNode","MutationObserver","observe","attributes","childList","subtree","context","title","renderForPromise","then","_ref2","html","js","combined","innerHTML","replaceNodeContents","catch","Array","isArray","imageid","imagedata","imageids","titlecolor","titlebackgroundcolor","fontsize","xposition","yposition","targetwidth","targetheight","src","border","imagetag","getElementsByTagName","getAllImagedataFromForm","imagediv","left","parseInt","top","borderColor","elementtitle","color","backgroundColor","fontSize","mform","addEventListener","backgroundfileNode","canvasx","canvasy","registerAllEventlistener","helpergrids","y","x","helpergrid","push","gridcolor","cmid","hidden","_ref","error","renderHelpergrid"],"mappings":"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"}