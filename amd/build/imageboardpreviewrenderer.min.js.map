{"version":3,"file":"imageboardpreviewrenderer.min.js","sources":["../src/imageboardpreviewrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n//import log from 'core/log';\n//import {eventTypes} from 'core_form/events';\n\nexport const init = () => {\n    registerAllEventlistener();\n    // Timeout notwendig, damit das Bild in der Draftarea \"vorhanden\" ist.\n    // document.querySelector('#id_unilabeltype_imageboard_backgroundimage_fieldset .filemanager-container .realpreview');\n    setTimeout(refreshBackgroundImage, 1000);\n    // To show all images on pageload.\n    setTimeout(refreshAllImages, 1000);\n\n    setTimeout(function() {\n     //   grid(600, 400);\n    }, 500);\n\n    /**\n     *\n     * @param {event} event\n     */\n    function focusoutExecute(event) {\n        var number = getNumberFromEvent(event);\n        if (number >= 0) {\n            refreshImage(number);\n        }\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @returns {*}\n     */\n    function getNumberFromEvent(event) {\n        // If there is a focusout event from one of the following input fields then evaluate\n        // the number of the element that was changed.\n        let imageidselectors = [\n            'id_unilabeltype_imageboard_title_',\n            'id_unilabeltype_imageboard_xposition_',\n            'id_unilabeltype_imageboard_yposition_',\n            'id_unilabeltype_imageboard_targetwidth_',\n            'id_unilabeltype_imageboard_targetheight_',\n            'id_unilabeltype_imageboard_border_',\n        ];\n        const eventid = event.target.getAttribute('id');\n        for (let i = 0; i < imageidselectors.length; i++) {\n            if (eventid.includes(imageidselectors[i])) {\n                return eventid.split(imageidselectors[i])[1];\n            }\n        }\n        // If focus out was NOT from one of our inputfield then return a number less than zero.\n        return -1;\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function onclickExecute(event) {\n        var targetid = event.target.getAttribute('id');\n        var mform = targetid.split('button-mform1')[1];\n        if (mform) {\n            setTimeout(function() {\n                // An element was added so we have to add a div for the image to the dom.\n                let singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n                let number = singleElements.length;\n                addImageToDom(number - 1);\n            }, 500);\n        }\n    }\n\n    /**\n     *\n     * @param {number} canvaswidth\n     * @param {number} canvasheight\n     */\n  /*  function grid(canvaswidth, canvasheight) {\n        // Create a 50x50px helpergrid if $capababilityforgrid.\n        let helpergrids = {};\n        for (let y = 0; y < canvasheight; y = y + 50) {\n            for (let x = 0; x < canvaswidth; x = x + 50) {\n                helpergrid = [];\n                helpergrid['x'] = x;\n                helpergrid['y'] = y;\n                helpergrids = helpergrid;\n            }\n        }\n    }*/\n\n    /**\n     *\n     * @param {event} event\n     */\n    /*\n    function machwas(event) {\n        log.debug(\"Bild hochgeladen\");\n        log.debug(event);\n    }\n    */\n\n    /**\n     * Register eventlistener to the all input fields of the form to register\n     * focus-out events from input fields in order to trigger a fresh of the preview.\n     */\n    function registerAllEventlistener() {\n        var mform = document.querySelectorAll('[id^=\"mform\"]')[0];\n        // We register one listener per eventtype to the mform and use the bubble-event-feature to check out\n        // the target of an event.\n\n        // All focusout-events will be handeled by oneListenerForAllInputFocusout.\n        mform.addEventListener(\"focusout\", focusoutExecute, false);\n\n        // All click-events will be handeled by oneListenerForAllInputClick.\n        mform.addEventListener(\"click\", onclickExecute, false);\n\n        // All uploadCompleted-events\n        //// mform.addEventListener(eventTypes.uploadCompleted, machwas, false);\n\n        // First: When uploading a backgroundimage the backgroundimage of the backgroundimagediv must be updated.\n        // ToDo: better use eventlistener\n        let backgroundfileNode = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        if (backgroundfileNode) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n        }\n        // Also add listener for canvas size\n        let canvasx = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n        if (canvasx) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasx, {attributes: true, childList: true, subtree: true});\n        }\n        let canvasy = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n        if (canvasy) {\n            let observer = new MutationObserver(refreshBackgroundImage);\n            observer.observe(canvasy, {attributes: true, childList: true, subtree: true});\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        // previewimage vom filemanager id_unilabeltype_imageboard_backgroundimage_fieldset erhalten\n        let filemanagerbackgroundimagefieldset = document.getElementById('id_unilabeltype_imageboard_backgroundimage_fieldset');\n        let previewimage = filemanagerbackgroundimagefieldset.getElementsByClassName('realpreview');\n        let backgrounddiv = document.getElementById('unilabel-imageboard-background-area');\n        if (previewimage.length > 0) {\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            backgrounddiv.style.background = 'red'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundSize = 'cover';\n            backgrounddiv.style.backgroundImage = \"url('\" + backgroundurl + \"')\";\n\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        } else {\n            // Image might be deleted so update the backroundidv and remove backgroundimage in preview;\n            // ToDo    if (previewimage.length > 0) does not recognize when an image is deleted so we need a different condition!\n            backgrounddiv.style.background = 'green'; // just to indicate changes during development.\n            backgrounddiv.style.backgroundImage = \"url('')\";\n            const canvaswidthinput = document.getElementById('id_unilabeltype_imageboard_canvaswidth');\n            let canvaswidthselected = canvaswidthinput.selectedOptions;\n            let canvaswidth = canvaswidthselected[0].value;\n            backgrounddiv.style.width = canvaswidth + \"px\";\n\n            const canvasheightinput = document.getElementById('id_unilabeltype_imageboard_canvasheight');\n            let canvasheightselected = canvasheightinput.selectedOptions;\n            let canvasheight = canvasheightselected[0].value;\n            backgrounddiv.style.height = canvasheight + \"px\";\n        }\n    }\n\n    /**\n     * Gets the number of ALL elements in the form and then adds a div for each element to the dom if not already exists.\n     * We need a timeout\n     */\n    function refreshAllImages() {\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // Todo: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            // Check if there exists already a div for this image.\n            const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n            if (imageid === null) {\n                // Div does not exist so we need do add it do dom.\n                addImageToDom(number);\n                // ToDo: Do we need a timeout to wait until the dic was added so that refresh can work correctly?\n                // see also refreshImage ... there is already a timeout\n                refreshImage(number);\n            } else {\n                refreshImage(number);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {int} number\n     */\n    function addImageToDom(number) {\n        //console.log(\"addImageToDom\" + number);\n        let backgroundArea = document.getElementById('unilabel-imageboard-background-area');\n        const imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n        if (imageid === null) {\n            //console.log('div fehlt noch im dom ' + imageid);\n            // This div does not exist so we need do add it do dom.\n            backgroundArea.innerHTML = backgroundArea.innerHTML + renderFromTemplate(number);\n            // add an obverser to be aple to update if imge is uloaded\n            let imagefileNode = document.getElementById('fitem_id_unilabeltype_imageboard_image_' + (number));\n            if (imagefileNode) {\n                let observer = new MutationObserver(refreshImage);\n                observer.observe(imagefileNode, {attributes: true, childList: true, subtree: true});\n            }\n            refreshImage(number);\n        } else {\n            //console.log('div existiert ' + number);\n            // Div already exists so we need only to refresh the image because we only uploaded a new image\n            // to an already existing div.\n            refreshImage(number);\n        }\n    }\n\n    /**\n     * Renders the div for the image in preview.\n     *\n     * @param {int} number\n     * @returns {string}\n     */\n    function renderFromTemplate(number) {\n        const imagedivashtml =\n            \"<div id='unilabel_imageboard_imagediv_\" + number + \"' style='z-index: 5; position: absolute;'>\" +\n            \"<div id='imageidtitle_\" + number + \"' class='unilabel-imageboard-title rounded' \" +\n            \" style='position: relative;'>Überschrift\" +\n            \"</div>\" +\n            \"<div id='imageidimage_\" + number + \"'>\" +\n            \"<img draggable='true' class='image' src='' id='unilabel-imageboard-imageid_\" +\n            number + \"' style='position: relative; background-color: #f00;'>\" +\n            \"</div>\" +\n            \"</div>\";\n        return imagedivashtml;\n    }\n\n    /**\n     * If an image was uploaded or inputfields in the form changed then we need to refrech\n     * this image.\n     * @param {int} number\n     */\n    function refreshImage(number) {\n        // When there was an upload, then the number is NOT a number.\n        // ToDo: Do not yet know the best way how I will get the number in his case.\n        // For now if it is a number the normal refresh can be used and only ONE image will be refreshed.\n        // In the else code ther will be a refresh of ALL images until I can refactor this.\n        if (!Array.isArray(number)) {\n            let imageid = document.getElementById('unilabel-imageboard-imageid_' + number);\n            // Werte für das image setzen\n            let imagedata = getAllImagedataFromForm(number);\n            imageid.style.background = 'blue';\n            imageid.src = imagedata['src'];\n            const imagediv = document.getElementById('unilabel_imageboard_imagediv_' + number);\n            imagediv.style.left = parseInt(imagedata['xposition']) + \"px\";\n            imagediv.style.top = parseInt(imagedata['yposition']) + \"px\";\n\n            // Breite und Höhe\n            if (imagedata['targetwidth'] != 0) {\n                imageid.style.width = imagedata['targetwidth'] + \"px\";\n            } else {\n                imageid.style.width = \"auto\";\n            }\n            if (imagedata['targetheight'] != 0) {\n                imageid.style.height = imagedata['targetheight'] + \"px\";\n            } else {\n                imageid.style.height = \"auto\";\n            }\n            if (imagedata['title'] != \"\") {\n                imageid.title = imagedata['title'];\n            } else {\n                imageid.title = '';\n            }\n            let colourpicker = document.getElementById('id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker');\n            let color = '';\n            if (colourpicker.value == '') {\n                color = '#000000';\n            } else {\n                color = colourpicker.value;\n            }\n            if (imagedata['border'] != 0) {\n                imageid.style.border = imagedata['border'] + \"px solid\";\n                imageid.style.borderColor = color;\n            } else {\n                imageid.style.border = \"0\";\n            }\n\n            // ToDo: add title if not empty\n            let title = imagedata['title'];\n            const imageidtitle = document.getElementById('imageidtitle_' + number);\n            imageidtitle.innerHTML = title;\n        } else {\n            //console.log(\"number ist ein array\" , number);\n            //console.log(\"number[0] ist ein array\" , number[0]);\n            //console.log(\"number[0].attributeName ist ein array\" , number[0].attributeName);\n            //////console.log(\"number[0].target ist ein array\", number[0].target);\n            setTimeout(function() {\n                refreshAllImages();\n            }, 600);\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        //console.log(\"getAllImagedataFromForm number= \" + number);\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n        };\n\n        let imagedata = [];\n        //console.log(\"document.getElementById(imageids.title)\", document.getElementById(imageids.title));\n        imagedata['title'] = document.getElementById(imageids.title).value;\n        imagedata['xposition'] = document.getElementById(imageids.xposition).value;\n        imagedata['yposition'] = document.getElementById(imageids.yposition).value;\n        imagedata['targetwidth'] = document.getElementById(imageids.targetwidth).value;\n        imagedata['targetheight'] = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata['src'] = src;\n        imagedata['border'] = document.getElementById(imageids.border).value;\n\n        return imagedata;\n    }\n};\n"],"names":["focusoutExecute","event","number","imageidselectors","eventid","target","getAttribute","i","length","includes","split","getNumberFromEvent","refreshImage","onclickExecute","setTimeout","addImageToDom","document","querySelectorAll","refreshBackgroundImage","previewimage","getElementById","getElementsByClassName","backgrounddiv","backgroundurl","style","background","backgroundSize","backgroundImage","canvaswidth","selectedOptions","value","width","canvasheight","height","refreshAllImages","singleElements","backgroundArea","innerHTML","renderFromTemplate","imagefileNode","MutationObserver","observe","attributes","childList","subtree","Array","isArray","imageid","imagedata","imageids","title","xposition","yposition","targetwidth","targetheight","src","border","imagetag","getElementsByTagName","getAllImagedataFromForm","imagediv","left","parseInt","top","colourpicker","color","borderColor","mform","addEventListener","backgroundfileNode","canvasx","canvasy","registerAllEventlistener"],"mappings":"sLAUoB,cAgBPA,gBAAgBC,WACjBC,gBAWoBD,WAGpBE,iBAAmB,CACnB,oCACA,wCACA,wCACA,0CACA,2CACA,4CAEEC,QAAUH,MAAMI,OAAOC,aAAa,UACrC,IAAIC,EAAI,EAAGA,EAAIJ,iBAAiBK,OAAQD,OACrCH,QAAQK,SAASN,iBAAiBI,WAC3BH,QAAQM,MAAMP,iBAAiBI,IAAI,UAI1C,EA7BKI,CAAmBV,OAC5BC,QAAU,GACVU,aAAaV,iBAkCZW,eAAeZ,OACLA,MAAMI,OAAOC,aAAa,MACpBI,MAAM,iBAAiB,IAExCI,YAAW,WAIPC,cAFqBC,SAASC,iBAAiB,mDACnBT,OACL,KACxB,cA0EFU,6BAGDC,aADqCH,SAASI,eAAe,uDACXC,uBAAuB,eACzEC,cAAgBN,SAASI,eAAe,0CACxCD,aAAaX,OAAS,EAAG,KACrBe,cAAgBJ,aAAa,GAAGb,aAAa,OAAOI,MAAM,KAAK,GAG/DS,aAAa,GAAGb,aAAa,OAAOI,MAAM,KAAK,GAAGD,SAAS,WAC3Dc,eAAiB,QAAUJ,aAAa,GAAGb,aAAa,OAAOI,MAAM,SAAS,IAElFY,cAAcE,MAAMC,WAAa,MACjCH,cAAcE,MAAME,eAAiB,QACrCJ,cAAcE,MAAMG,gBAAkB,QAAUJ,cAAgB,SAI5DK,YAFqBZ,SAASI,eAAe,0CACNS,gBACL,GAAGC,MACzCR,cAAcE,MAAMO,MAAQH,YAAc,SAItCI,aAFsBhB,SAASI,eAAe,2CACLS,gBACL,GAAGC,MAC3CR,cAAcE,MAAMS,OAASD,aAAe,SACzC,CAGHV,cAAcE,MAAMC,WAAa,QACjCH,cAAcE,MAAMG,gBAAkB,cAGlCC,YAFqBZ,SAASI,eAAe,0CACNS,gBACL,GAAGC,MACzCR,cAAcE,MAAMO,MAAQH,YAAc,SAItCI,aAFsBhB,SAASI,eAAe,2CACLS,gBACL,GAAGC,MAC3CR,cAAcE,MAAMS,OAASD,aAAe,eAQ3CE,yBACCC,eAAiBnB,SAASC,iBAAiB,uDAC5C,IAAIV,EAAI,EAAGA,EAAI4B,eAAe3B,OAAQD,IAAK,KAGxCL,OADgBiC,eAAe5B,GAAGD,aAAa,MACxBI,MAAM,2CAA2C,GAG5D,OADAM,SAASI,eAAe,+BAAiClB,SAGrEa,cAAcb,QAGdU,aAAaV,SAEbU,aAAaV,kBAShBa,cAAcb,YAEfkC,eAAiBpB,SAASI,eAAe,0CAE7B,OADAJ,SAASI,eAAe,+BAAiClB,QACnD,CAGlBkC,eAAeC,UAAYD,eAAeC,mBAsBtBnC,cAEpB,yCAA2CA,OAA3C,mEAC2BA,OAD3B,mHAI2BA,OAJ3B,gFAMAA,OANA,qEAxBsDoC,CAAmBpC,YAErEqC,cAAgBvB,SAASI,eAAe,0CAA6ClB,WACrFqC,cAAe,CACA,IAAIC,iBAAiB5B,cAC3B6B,QAAQF,cAAe,CAACG,YAAY,EAAMC,WAAW,EAAMC,SAAS,IAEjFhC,aAAaV,aAKbU,aAAaV,iBA6BZU,aAAaV,WAKb2C,MAAMC,QAAQ5C,QAiDfY,YAAW,WACPoB,qBACD,SAnDqB,KACpBa,QAAU/B,SAASI,eAAe,+BAAiClB,QAEnE8C,mBA0DqB9C,YAEzB+C,SAAW,CACXC,MAAO,oCAAsChD,OAC7CiD,UAAW,wCAA0CjD,OACrDkD,UAAW,wCAA0ClD,OACrDmD,YAAa,0CAA4CnD,OACzDoD,aAAc,2CAA6CpD,OAC3DqD,IAAK,GACLC,OAAQ,qCAAuCtD,QAG/C8C,UAAY,GAEhBA,UAAS,MAAYhC,SAASI,eAAe6B,SAASC,OAAOpB,MAC7DkB,UAAS,UAAgBhC,SAASI,eAAe6B,SAASE,WAAWrB,MACrEkB,UAAS,UAAgBhC,SAASI,eAAe6B,SAASG,WAAWtB,MACrEkB,UAAS,YAAkBhC,SAASI,eAAe6B,SAASI,aAAavB,MACzEkB,UAAS,aAAmBhC,SAASI,eAAe6B,SAASK,cAAcxB,YAIrE2B,SADUzC,SAASI,eAAe,oCAAsClB,OAAS,aAC9DwD,qBAAqB,WAC1CH,IAAM,GACNE,SAASjD,QAA6B,GAAnBiD,SAASjD,SAC5B+C,IAAME,SAAS,GAAGF,IAClBA,IAAMA,IAAI7C,MAAM,KAAK,WAEzBsC,UAAS,IAAUO,IACnBP,UAAS,OAAahC,SAASI,eAAe6B,SAASO,QAAQ1B,MAExDkB,UAzFaW,CAAwBzD,QACxC6C,QAAQvB,MAAMC,WAAa,OAC3BsB,QAAQQ,IAAMP,UAAS,UACjBY,SAAW5C,SAASI,eAAe,gCAAkClB,QAC3E0D,SAASpC,MAAMqC,KAAOC,SAASd,UAAS,WAAiB,KACzDY,SAASpC,MAAMuC,IAAMD,SAASd,UAAS,WAAiB,KAGxB,GAA5BA,UAAS,YACTD,QAAQvB,MAAMO,MAAQiB,UAAS,YAAkB,KAEjDD,QAAQvB,MAAMO,MAAQ,OAEO,GAA7BiB,UAAS,aACTD,QAAQvB,MAAMS,OAASe,UAAS,aAAmB,KAEnDD,QAAQvB,MAAMS,OAAS,OAED,IAAtBe,UAAS,MACTD,QAAQG,MAAQF,UAAS,MAEzBD,QAAQG,MAAQ,OAEhBc,aAAehD,SAASI,eAAe,gEACvC6C,MAAQ,GAERA,MADsB,IAAtBD,aAAalC,MACL,UAEAkC,aAAalC,MAEE,GAAvBkB,UAAS,QACTD,QAAQvB,MAAMgC,OAASR,UAAS,OAAa,WAC7CD,QAAQvB,MAAM0C,YAAcD,OAE5BlB,QAAQvB,MAAMgC,OAAS,QAIvBN,MAAQF,UAAS,MACAhC,SAASI,eAAe,gBAAkBlB,QAClDmC,UAAYa,uBA1MzBiB,MAAQnD,SAASC,iBAAiB,iBAAiB,GAKvDkD,MAAMC,iBAAiB,WAAYpE,iBAAiB,GAGpDmE,MAAMC,iBAAiB,QAASvD,gBAAgB,OAO5CwD,mBAAqBrD,SAASI,eAAe,0DAC7CiD,mBAAoB,CACL,IAAI7B,iBAAiBtB,wBAC3BuB,QAAQ4B,mBAAoB,CAAC3B,YAAY,EAAMC,WAAW,EAAMC,SAAS,QAGlF0B,QAAUtD,SAASI,eAAe,6CAClCkD,QAAS,CACM,IAAI9B,iBAAiBtB,wBAC3BuB,QAAQ6B,QAAS,CAAC5B,YAAY,EAAMC,WAAW,EAAMC,SAAS,QAEvE2B,QAAUvD,SAASI,eAAe,8CAClCmD,QAAS,CACM,IAAI/B,iBAAiBtB,wBAC3BuB,QAAQ8B,QAAS,CAAC7B,YAAY,EAAMC,WAAW,EAAMC,SAAS,KAhI/E4B,GAGA1D,WAAWI,uBAAwB,KAEnCJ,WAAWoB,iBAAkB,KAE7BpB,YAAW,cAER"}